{"ast":null,"code":"import _slicedToArray from \"C:/Users/artem/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields) {\n  var excludedEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var edges = [];\n  var nodes = new Set();\n  var excludes = new Set(excludedEdges.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        a = _ref2[0],\n        b = _ref2[1];\n\n    return \"\".concat(a, \"-\").concat(b);\n  }));\n\n  function addNode(depPath, key) {\n    var node = split(depPath)[0];\n    nodes.add(node);\n    if (!excludes.has(\"\".concat(key, \"-\").concat(node))) edges.push([key, node]);\n  }\n\n  var _loop = function _loop(key) {\n    if (has(fields, key)) {\n      var value = fields[key];\n      nodes.add(key);\n      if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(function (path) {\n        return addNode(path, key);\n      });\n    }\n  };\n\n  for (var key in fields) {\n    _loop(key);\n  }\n\n  return toposort.array(Array.from(nodes), edges).reverse();\n}","map":{"version":3,"sources":["C:/Users/artem/my-app/node_modules/yup/es/util/sortFields.js"],"names":["has","toposort","split","Ref","isSchema","sortFields","fields","excludedEdges","edges","nodes","Set","excludes","map","a","b","addNode","depPath","key","node","add","push","value","isRef","isSibling","path","deps","forEach","array","Array","from","reverse"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,YAAhB,C,CAA8B;;AAE9B,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAAgD;AAAA,MAApBC,aAAoB,uEAAJ,EAAI;AAC7D,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,KAAK,GAAG,IAAIC,GAAJ,EAAZ;AACA,MAAIC,QAAQ,GAAG,IAAID,GAAJ,CAAQH,aAAa,CAACK,GAAd,CAAkB;AAAA;AAAA,QAAEC,CAAF;AAAA,QAAKC,CAAL;;AAAA,qBAAeD,CAAf,cAAoBC,CAApB;AAAA,GAAlB,CAAR,CAAf;;AAEA,WAASC,OAAT,CAAiBC,OAAjB,EAA0BC,GAA1B,EAA+B;AAC7B,QAAIC,IAAI,GAAGhB,KAAK,CAACc,OAAD,CAAL,CAAe,CAAf,CAAX;AACAP,IAAAA,KAAK,CAACU,GAAN,CAAUD,IAAV;AACA,QAAI,CAACP,QAAQ,CAACX,GAAT,WAAgBiB,GAAhB,cAAuBC,IAAvB,EAAL,EAAqCV,KAAK,CAACY,IAAN,CAAW,CAACH,GAAD,EAAMC,IAAN,CAAX;AACtC;;AAT4D,6BAWlDD,GAXkD;AAWnC,QAAIjB,GAAG,CAACM,MAAD,EAASW,GAAT,CAAP,EAAsB;AAC9C,UAAII,KAAK,GAAGf,MAAM,CAACW,GAAD,CAAlB;AACAR,MAAAA,KAAK,CAACU,GAAN,CAAUF,GAAV;AACA,UAAId,GAAG,CAACmB,KAAJ,CAAUD,KAAV,KAAoBA,KAAK,CAACE,SAA9B,EAAyCR,OAAO,CAACM,KAAK,CAACG,IAAP,EAAaP,GAAb,CAAP,CAAzC,KAAuE,IAAIb,QAAQ,CAACiB,KAAD,CAAR,IAAmB,UAAUA,KAAjC,EAAwCA,KAAK,CAACI,IAAN,CAAWC,OAAX,CAAmB,UAAAF,IAAI;AAAA,eAAIT,OAAO,CAACS,IAAD,EAAOP,GAAP,CAAX;AAAA,OAAvB;AAChH;AAf4D;;AAW7D,OAAK,IAAMA,GAAX,IAAkBX,MAAlB;AAAA,UAAWW,GAAX;AAAA;;AAMA,SAAOhB,QAAQ,CAAC0B,KAAT,CAAeC,KAAK,CAACC,IAAN,CAAWpB,KAAX,CAAf,EAAkCD,KAAlC,EAAyCsB,OAAzC,EAAP;AACD","sourcesContent":["import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields, excludedEdges = []) {\n  let edges = [];\n  let nodes = new Set();\n  let excludes = new Set(excludedEdges.map(([a, b]) => `${a}-${b}`));\n\n  function addNode(depPath, key) {\n    let node = split(depPath)[0];\n    nodes.add(node);\n    if (!excludes.has(`${key}-${node}`)) edges.push([key, node]);\n  }\n\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    nodes.add(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n\n  return toposort.array(Array.from(nodes), edges).reverse();\n}"]},"metadata":{},"sourceType":"module"}