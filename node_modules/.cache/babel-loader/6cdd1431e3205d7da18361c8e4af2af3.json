{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/artem/my-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import posts from\"./MyPosts.module.css\";import{Formik,Field}from\"formik\";import*as Yup from\"yup\";import styled from\"styled-components\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Error=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  color: red;\\n  font-size: 18px;\\n  font-style: italic;\\n\"])));var MyPostForm=function MyPostForm(props){var initialValues={postText:''};var SignupSchema=Yup.object().shape({postText:Yup.string().min(2,'Too Short!').max(250,'Too Long!')});var submitCallback=function submitCallback(values,_ref){var setSubmitting=_ref.setSubmitting;setTimeout(function(){props.onAddPost(values.postText);setSubmitting(false);},400);};var validateValues=function validateValues(values){var errors={};if(!values.postText){errors.postText='Required';}else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.postText)){errors.postText='Invalid PostText address';}return errors;};return/*#__PURE__*/_jsx(Formik,{initialValues:initialValues,validationSchema:SignupSchema,validateValues:validateValues,onSubmit:submitCallback,children:function children(_ref2){var values=_ref2.values,errors=_ref2.errors,touched=_ref2.touched,handleChange=_ref2.handleChange,handleBlur=_ref2.handleBlur,handleSubmit=_ref2.handleSubmit,isSubmitting=_ref2.isSubmitting;return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Field,{type:'text',name:'postText',placeholder:'Your post text',className:posts.textarea,onChange:handleChange,onBlur:handleBlur,value:values.postText})}),/*#__PURE__*/_jsx(Error,{children:errors.postText&&touched.postText&&errors.postText}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:posts.mybutton,disabled:isSubmitting,children:\"Add post\"})})]});}});};export default MyPostForm;","map":{"version":3,"sources":["C:/Users/artem/my-app/src/compo/Profile/Posts/MyPostForm.jsx"],"names":["posts","Formik","Field","Yup","styled","Error","div","MyPostForm","props","initialValues","postText","SignupSchema","object","shape","string","min","max","submitCallback","values","setSubmitting","setTimeout","onAddPost","validateValues","errors","test","touched","handleChange","handleBlur","handleSubmit","isSubmitting","textarea","mybutton"],"mappings":"+IAAA,MAAOA,CAAAA,KAAP,KAAkB,sBAAlB,CACA,OAAQC,MAAR,CAAgBC,KAAhB,KAA4B,QAA5B,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,KAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,C,wFAEA,GAAMC,CAAAA,KAAK,CAAGD,MAAM,CAACE,GAAV,6HAAX,CAMA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAE1B,GAAIC,CAAAA,aAAa,CAAG,CAChBC,QAAQ,CAAE,EADM,CAApB,CAGA,GAAIC,CAAAA,YAAY,CAAGR,GAAG,CAACS,MAAJ,GAAaC,KAAb,CAAmB,CAClCH,QAAQ,CAAEP,GAAG,CAACW,MAAJ,GACLC,GADK,CACD,CADC,CACE,YADF,EAELC,GAFK,CAED,GAFC,CAEI,WAFJ,CADwB,CAAnB,CAAnB,CAKA,GAAIC,CAAAA,cAAc,CAAI,QAAlBA,CAAAA,cAAkB,CAACC,MAAD,MAA+B,IAApBC,CAAAA,aAAoB,MAApBA,aAAoB,CACjDC,UAAU,CAAC,UAAM,CACbZ,KAAK,CAACa,SAAN,CAAgBH,MAAM,CAACR,QAAvB,EACAS,aAAa,CAAC,KAAD,CAAb,CACH,CAHS,CAGP,GAHO,CAAV,CAIH,CALD,CAMA,GAAIG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAJ,MAAM,CAAI,CAC3B,GAAMK,CAAAA,MAAM,CAAG,EAAf,CACA,GAAI,CAACL,MAAM,CAACR,QAAZ,CAAsB,CAClBa,MAAM,CAACb,QAAP,CAAkB,UAAlB,CACH,CAFD,IAEO,IACH,CAAC,2CAA2Cc,IAA3C,CAAgDN,MAAM,CAACR,QAAvD,CADE,CAEL,CACEa,MAAM,CAACb,QAAP,CAAkB,0BAAlB,CACH,CACD,MAAOa,CAAAA,MAAP,CACH,CAVD,CAYA,mBACI,KAAC,MAAD,EACI,aAAa,CAAId,aADrB,CAEI,gBAAgB,CAAIE,YAFxB,CAGI,cAAc,CAAIW,cAHtB,CAII,QAAQ,CAAIL,cAJhB,UAKK,4BACKC,CAAAA,MADL,OACKA,MADL,CAEKK,MAFL,OAEKA,MAFL,CAGKE,OAHL,OAGKA,OAHL,CAIKC,YAJL,OAIKA,YAJL,CAKKC,UALL,OAKKA,UALL,CAMKC,YANL,OAMKA,YANL,CAOKC,YAPL,OAOKA,YAPL,oBAUG,cAAM,QAAQ,CAAED,YAAhB,wBACI,kCACI,KAAC,KAAD,EAAO,IAAI,CAAE,MAAb,CAAqB,IAAI,CAAE,UAA3B,CAAuC,WAAW,CAAE,gBAApD,CAAsE,SAAS,CAAE5B,KAAK,CAAC8B,QAAvF,CAAiG,QAAQ,CAAEJ,YAA3G,CAAyH,MAAM,CAAEC,UAAjI,CAA6I,KAAK,CAAET,MAAM,CAACR,QAA3J,EADJ,EADJ,cAII,KAAC,KAAD,WAAQa,MAAM,CAACb,QAAP,EAAmBe,OAAO,CAACf,QAA3B,EAAuCa,MAAM,CAACb,QAAtD,EAJJ,cAKI,kCACI,eAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAEV,KAAK,CAAC+B,QAAvC,CAAiD,QAAQ,CAAEF,YAA3D,sBADJ,EALJ,GAVH,EALL,EADJ,CA4BH,CAxDD,CA0DA,cAAetB,CAAAA,UAAf","sourcesContent":["import posts from \"./MyPosts.module.css\";\r\nimport {Formik, Field} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Error = styled.div`\r\n  color: red;\r\n  font-size: 18px;\r\n  font-style: italic;\r\n`\r\n\r\nconst MyPostForm = (props) => {\r\n\r\n    let initialValues = {\r\n        postText: ''\r\n    }\r\n    let SignupSchema = Yup.object().shape({\r\n        postText: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(250, 'Too Long!')\r\n    });\r\n    let submitCallback =  (values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n            props.onAddPost(values.postText)\r\n            setSubmitting(false);\r\n        }, 400);\r\n    }\r\n    let validateValues = values => {\r\n        const errors = {};\r\n        if (!values.postText) {\r\n            errors.postText = 'Required';\r\n        } else if (\r\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.postText)\r\n        ) {\r\n            errors.postText = 'Invalid PostText address';\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues = {initialValues}\r\n            validationSchema = {SignupSchema}\r\n            validateValues = {validateValues}\r\n            onSubmit = {submitCallback}>\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  /* and other goodies */\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <Field type={'text'} name={'postText'} placeholder={'Your post text'} className={posts.textarea} onChange={handleChange} onBlur={handleBlur} value={values.postText}/>\r\n                    </div>\r\n                    <Error>{errors.postText && touched.postText && errors.postText}</Error>\r\n                    <div>\r\n                        <button type=\"submit\" className={posts.mybutton} disabled={isSubmitting}>Add post</button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default MyPostForm"]},"metadata":{},"sourceType":"module"}