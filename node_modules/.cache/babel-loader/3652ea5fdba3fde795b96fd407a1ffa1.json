{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\my-app\\\\src\\\\compo\\\\Message\\\\DialogsContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { SendMessageActionCreater, UpdateNewMessageActionCreater } from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { getIsAuth, getMessage } from \"../../redux/dialogSelectors\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\"; // const DialogsContainer = (props) => {\n//     const selectDialogState = createSelector(\n//         (state) => state.dialogsPage,\n//         (state) => state.auth.isAuth\n//     )\n//     const selectorsDialog = useSelector(selectDialogState)\n//     const dispatch = useDispatch()\n//     return (\n//         RedirectToAuth(Dialogs)\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DialogsContainer = props => {\n  _s();\n\n  let navigator = useNavigate();\n  useEffect(() => {\n    if (props.isAuth === false) {\n      return navigator('/login');\n    }\n  }, [navigator, props.isAuth]);\n  const dialogsState = useSelector(state => {\n    getMessage(state);\n  });\n  const authState = useSelector(state => {\n    getIsAuth(state);\n  });\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(Dialogs, {\n    SendMessageActionCreater: dispatch(SendMessageActionCreater),\n    UpdateNewMessageActionCreater: dispatch(UpdateNewMessageActionCreater),\n    dialogsPage: dialogsState,\n    isAuth: authState\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}; // const mapStateToProps = (state) => {\n//     return {\n//         dialogsPage: getMessage(state),\n//         isAuth: state.auth.isAuth\n//     }\n// }\n//\n// connect(mapStateToProps, {SendMessageActionCreater, UpdateNewMessageActionCreater})(DialogsContainer);\n\n\n_s(DialogsContainer, \"8aTuvq81CoXm3rXhMHu28A0Tblo=\", false, function () {\n  return [useNavigate, useSelector, useSelector, useDispatch];\n});\n\n_c = DialogsContainer;\nexport default DialogsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogsContainer\");","map":{"version":3,"sources":["C:/Users/artem/my-app/src/compo/Message/DialogsContainer.jsx"],"names":["SendMessageActionCreater","UpdateNewMessageActionCreater","Dialogs","connect","useDispatch","useSelector","getIsAuth","getMessage","useNavigate","useEffect","DialogsContainer","props","navigator","isAuth","dialogsState","state","authState","dispatch"],"mappings":";;;AAAA,SAAQA,wBAAR,EAAkCC,6BAAlC,QAAsE,4BAAtE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,EAAiBC,WAAjB,EAA8BC,WAA9B,QAAgD,aAAhD;AACA,SAAQC,SAAR,EAAmBC,UAAnB,QAAoC,6BAApC;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,SAAQC,SAAR,QAAwB,OAAxB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAChC,MAAIC,SAAS,GAAGJ,WAAW,EAA3B;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIE,KAAK,CAACE,MAAN,KAAiB,KAArB,EAA4B;AACxB,aAAOD,SAAS,CAAC,QAAD,CAAhB;AACH;AACJ,GAJQ,EAIN,CAACA,SAAD,EAAYD,KAAK,CAACE,MAAlB,CAJM,CAAT;AAMA,QAAMC,YAAY,GAAGT,WAAW,CAAGU,KAAD,IAAW;AACzCR,IAAAA,UAAU,CAACQ,KAAD,CAAV;AACH,GAF+B,CAAhC;AAGA,QAAMC,SAAS,GAAGX,WAAW,CAAEU,KAAD,IAAW;AACrCT,IAAAA,SAAS,CAACS,KAAD,CAAT;AACH,GAF4B,CAA7B;AAGA,QAAME,QAAQ,GAAGb,WAAW,EAA5B;AAEA,sBACI,QAAC,OAAD;AAAS,IAAA,wBAAwB,EAAEa,QAAQ,CAACjB,wBAAD,CAA3C;AACS,IAAA,6BAA6B,EAAEiB,QAAQ,CAAChB,6BAAD,CADhD;AAES,IAAA,WAAW,EAAEa,YAFtB;AAGS,IAAA,MAAM,EAAEE;AAHjB;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAtBD,C,CA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAnCMN,gB;UACcF,W,EAOKH,W,EAGHA,W,EAGDD,W;;;KAdfM,gB;AAqCN,eAAeA,gBAAf","sourcesContent":["import {SendMessageActionCreater, UpdateNewMessageActionCreater} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsAuth, getMessage} from \"../../redux/dialogSelectors\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useEffect} from \"react\";\r\n\r\n\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n//     const selectDialogState = createSelector(\r\n//         (state) => state.dialogsPage,\r\n//         (state) => state.auth.isAuth\r\n//     )\r\n//     const selectorsDialog = useSelector(selectDialogState)\r\n//     const dispatch = useDispatch()\r\n//     return (\r\n//         RedirectToAuth(Dialogs)\r\n//     )\r\n// }\r\n\r\n\r\nconst DialogsContainer = (props) => {\r\n    let navigator = useNavigate();\r\n    useEffect(() => {\r\n        if (props.isAuth === false) {\r\n            return navigator('/login')\r\n        }\r\n    }, [navigator, props.isAuth]);\r\n\r\n    const dialogsState = useSelector( (state) => {\r\n        getMessage(state)\r\n    });\r\n    const authState = useSelector((state) => {\r\n        getIsAuth(state)\r\n    });\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Dialogs SendMessageActionCreater={dispatch(SendMessageActionCreater)}\r\n                 UpdateNewMessageActionCreater={dispatch(UpdateNewMessageActionCreater)}\r\n                 dialogsPage={dialogsState}\r\n                 isAuth={authState}/>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         dialogsPage: getMessage(state),\r\n//         isAuth: state.auth.isAuth\r\n//     }\r\n// }\r\n//\r\n// connect(mapStateToProps, {SendMessageActionCreater, UpdateNewMessageActionCreater})(DialogsContainer);\r\n\r\nexport default DialogsContainer;\r\n"]},"metadata":{},"sourceType":"module"}