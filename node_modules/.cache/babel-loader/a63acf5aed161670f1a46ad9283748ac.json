{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\my-app\\\\src\\\\compo\\\\Message\\\\Dialogs.jsx\",\n    _s = $RefreshSig$();\n\nimport message from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from \"./MessagesItem/Message\";\nimport { createRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getIsAuth, getMessage } from \"../../redux/dialogSelectors\";\nimport { Formik, Field } from \"formik\";\nimport DialogsForm from \"./DialogsForm\";\nimport { SendMessageActionCreater } from \"../../redux/dialogsReducer\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dialogs(props) {\n  _s();\n\n  let navigator = useNavigate();\n  useEffect(() => {\n    if (props.isAuth === false) {\n      return navigator('/login');\n    }\n  }, [navigator, props.isAuth]);\n  const dialogsPage = useSelector(state => getMessage(state));\n  let dialogsElements = dialogsPage.dialogsData.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id\n  }, d.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 60\n  }, this));\n  let messagesElements = dialogsPage.messagesData.map(m => /*#__PURE__*/_jsxDEV(Message, {\n    ava: m.ava,\n    id: m.id,\n    content: m.message\n  }, m.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 62\n  }, this));\n  const dispatch = useDispatch();\n\n  let OnClickSendMessage = () => {\n    props.SendMessageActionCreater();\n  };\n\n  let OnNewMessageSend = e => {\n    let body = e.target.value;\n    props.UpdateNewMessageActionCreater(body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: message.dialogs,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: message.notify,\n      children: dialogsElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: message.paper_dial,\n      children: messagesElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogsForm, {\n      SendMessageActionCreater: dispatch(SendMessageActionCreater)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dialogs, \"eFU31p0HSVoggUHO97dfBEekjyM=\", false, function () {\n  return [useNavigate, useSelector, useDispatch];\n});\n\n_c = Dialogs;\nexport default Dialogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"sources":["C:/Users/artem/my-app/src/compo/Message/Dialogs.jsx"],"names":["message","DialogItem","Message","createRef","useEffect","useDispatch","useSelector","getIsAuth","getMessage","Formik","Field","DialogsForm","SendMessageActionCreater","useNavigate","Dialogs","props","navigator","isAuth","dialogsPage","state","dialogsElements","dialogsData","map","d","name","id","messagesElements","messagesData","m","ava","dispatch","OnClickSendMessage","OnNewMessageSend","e","body","target","value","UpdateNewMessageActionCreater","dialogs","notify","paper_dial"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,SAAR,EAAmBC,UAAnB,QAAoC,6BAApC;AACA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,QAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,wBAAR,QAAuC,4BAAvC;AACA,SAAQC,WAAR,QAA0B,kBAA1B;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AAKpB,MAAIC,SAAS,GAAGH,WAAW,EAA3B;AACAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,KAAK,CAACE,MAAN,KAAiB,KAArB,EAA4B;AACxB,aAAOD,SAAS,CAAC,QAAD,CAAhB;AACH;AACJ,GAJQ,EAIN,CAACA,SAAD,EAAYD,KAAK,CAACE,MAAlB,CAJM,CAAT;AAQA,QAAMC,WAAW,GAAGZ,WAAW,CAAEa,KAAK,IAAIX,UAAU,CAACW,KAAD,CAArB,CAA/B;AACA,MAAIC,eAAe,GAAGF,WAAW,CAACG,WAAZ,CAAwBC,GAAxB,CAA4BC,CAAC,iBAAI,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,CAAC,CAACC,IAApB;AAAqC,IAAA,EAAE,EAAED,CAAC,CAACE;AAA3C,KAA+BF,CAAC,CAACE,EAAjC;AAAA;AAAA;AAAA;AAAA,UAAjC,CAAtB;AACA,MAAIC,gBAAgB,GAAGR,WAAW,CAACS,YAAZ,CAAyBL,GAAzB,CAA6BM,CAAC,iBAAI,QAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,CAAC,CAACC,GAAhB;AAAgC,IAAA,EAAE,EAAED,CAAC,CAACH,EAAtC;AAA0C,IAAA,OAAO,EAAEG,CAAC,CAAC5B;AAArD,KAA0B4B,CAAC,CAACH,EAA5B;AAAA;AAAA;AAAA;AAAA,UAAlC,CAAvB;AAIA,QAAMK,QAAQ,GAAGzB,WAAW,EAA5B;;AAIA,MAAI0B,kBAAkB,GAAG,MAAM;AAC3BhB,IAAAA,KAAK,CAACH,wBAAN;AACH,GAFD;;AAGA,MAAIoB,gBAAgB,GAAIC,CAAD,IAAO;AAC1B,QAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAApB;AACArB,IAAAA,KAAK,CAACsB,6BAAN,CAAoCH,IAApC;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAElC,OAAO,CAACsC,OAAxB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEtC,OAAO,CAACuC,MAAxB;AAAA,gBACKnB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAEpB,OAAO,CAACwC,UAAxB;AAAA,gBACKd;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI,QAAC,WAAD;AAAa,MAAA,wBAAwB,EAAEI,QAAQ,CAAClB,wBAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA3CQE,O;UAKWD,W,EASIP,W,EAMHD,W;;;KApBZS,O;AA6CT,eAAeA,OAAf","sourcesContent":["import message from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogsItem';\r\nimport Message from \"./MessagesItem/Message\";\r\nimport {createRef, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsAuth, getMessage} from \"../../redux/dialogSelectors\";\r\nimport {Formik, Field} from \"formik\";\r\nimport DialogsForm from \"./DialogsForm\";\r\nimport {SendMessageActionCreater} from \"../../redux/dialogsReducer\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nfunction Dialogs(props) {\r\n\r\n\r\n\r\n\r\n    let navigator = useNavigate()\r\n    useEffect(() => {\r\n        if (props.isAuth === false) {\r\n            return navigator('/login')\r\n        }\r\n    }, [navigator, props.isAuth]);\r\n\r\n\r\n\r\n    const dialogsPage = useSelector( state => getMessage(state))\r\n    let dialogsElements = dialogsPage.dialogsData.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n    let messagesElements = dialogsPage.messagesData.map(m => <Message ava={m.ava} key={m.id} id={m.id} content={m.message}/>)\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    let OnClickSendMessage = () => {\r\n        props.SendMessageActionCreater();\r\n    }\r\n    let OnNewMessageSend = (e) => {\r\n        let body = e.target.value;\r\n        props.UpdateNewMessageActionCreater(body);\r\n    }\r\n\r\n    return (\r\n        <div className={message.dialogs}>\r\n            <div className={message.notify}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={message.paper_dial}>\r\n                {messagesElements}\r\n            </div>\r\n            <DialogsForm SendMessageActionCreater={dispatch(SendMessageActionCreater)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs"]},"metadata":{},"sourceType":"module"}