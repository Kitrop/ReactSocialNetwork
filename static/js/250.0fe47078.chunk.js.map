{"version":3,"file":"static/js/250.0fe47078.chunk.js","mappings":"kJACA,OAAgB,QAAU,yBAAyB,SAAW,2BCA9D,EAA+B,kC,mBCY/B,MATA,SAAoBA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,eAAsBD,EAAMM,KAA5B,UCPZ,EAA+B,+BCS/B,MARA,SAAiBN,GACb,OACI,0BACI,gBAAKG,UAAWI,EAAhB,SAAuCP,EAAMQ,a,wCC2CzD,EA3CmB,SAACR,GAChB,IAUIS,EAAeC,EAAAA,KAAaC,MAAM,CAClCC,YAAaF,EAAAA,KACRG,IAAI,EAAG,cACPC,IAAI,IAAK,eAElB,OACI,SAAC,KAAD,CACIC,cAjBc,CAClBH,YAAa,IAiBTI,SAfQ,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACvBC,YAAW,WACPC,QAAQC,IAAIJ,EAAOL,aACnBZ,EAAMsB,yBAAyBL,EAAOL,aACtCM,GAAc,KACf,MAWCK,iBAAoBd,EAHxB,SAIK,gBACKQ,EADL,EACKA,OAGAO,GAJL,EAEKC,OAFL,EAGKC,QAHL,EAIKF,cACAG,EALL,EAKKA,WACAC,EANL,EAMKA,aACAC,EAPL,EAOKA,aAPL,OASG,kBAAMb,SAAUY,EAAhB,WACI,0BACI,SAAC,KAAD,CAAOE,KAAK,OAAOxB,KAAM,cAAeyB,YAAa,oBAAsBC,SAAUR,EAAcS,OAAQN,EAAYO,MAAOjB,EAAOL,iBAEzI,0BACI,mBAAQkB,KAAK,SAASK,SAAUN,EAAc1B,UAAWI,EAAAA,SAAzD,mC,UCMxB,MArCA,SAAiBP,GAGb,IAAMoC,GAASC,EAAAA,EAAAA,KAAa,SAAAC,GAAK,OCRZ,SAACA,GACtB,OAAOA,EAAMC,KAAKH,ODOmBI,CAAUF,MAC3CG,GAAYC,EAAAA,EAAAA,OAChBC,EAAAA,EAAAA,YAAU,WACN,IAAe,IAAXP,EACA,OAAOK,EAAU,YAEtB,CAACL,EAAQK,IAIZ,IAAMG,GAAcP,EAAAA,EAAAA,KAAa,SAAAC,GAAK,OCtBhB,SAACA,GACvB,OAAOA,EAAMM,YDqB6BC,CAAWP,MACjDQ,EAAkBF,EAAYG,YAAYC,KAAI,SAAA5C,GAAC,OAAI,SAAC,EAAD,CAAYE,KAAMF,EAAEE,KAAiBJ,GAAIE,EAAEF,IAAZE,EAAEF,OACpF+C,EAAmBL,EAAYM,aAAaF,KAAI,SAAAG,GAAC,OAAI,SAAC,EAAD,CAASC,IAAKD,EAAEC,IAAgBlD,GAAIiD,EAAEjD,GAAIM,QAAS2C,EAAE5C,SAA3B4C,EAAEjD,OAI/EmD,GAAWC,EAAAA,EAAAA,MAKjB,OACI,iBAAKnD,UAAWI,EAAAA,QAAhB,WACI,gBAAKJ,UAAWI,EAAAA,OAAhB,SACKuC,KAEL,gBAAK3C,UAAWI,EAAAA,WAAhB,SACK0C,KAEL,SAACM,EAAD,CAAajC,yBAXH,SAACkC,GAAD,OAAoBH,EAAS,CAACvB,KAAK,eAAgB0B,eAAAA","sources":["webpack://my-app/./src/compo/Message/Dialogs.module.css?07db","webpack://my-app/./src/compo/Message/DialogItem/DialogsItem.module.css?2cb4","compo/Message/DialogItem/DialogsItem.jsx","webpack://my-app/./src/compo/Message/MessagesItem/Messsage.module.css?cd2a","compo/Message/MessagesItem/Message.jsx","compo/Message/DialogsForm.jsx","compo/Message/Dialogs.jsx","redux/selectors/dialogSelectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__2Hg8y\",\"mybutton\":\"Dialogs_mybutton__9rE-s\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs_item\":\"DialogsItem_dialogs_item__fRQgs\"};","import d from './DialogsItem.module.css';\nimport {NavLink} from 'react-router-dom';\n\n\nfunction DialogItem(props) {\n    let path = \"/dialogs/\" + props.id;\n    return (\n        <div className={d.dialogs_item}>\n            <NavLink to={path}>  {props.name} </NavLink>\n        </div>\n    );\n}\n\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"message_item\":\"Messsage_message_item__ZEACC\"};","import message from './Messsage.module.css';\n\nfunction Message(props) {\n    return (\n        <div>\n            <div className={message.message_item}>{props.content}</div>\n        </div>\n    );\n}\n\nexport default Message;","import {Field, Formik} from \"formik\";\r\nimport message from \"./Dialogs.module.css\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\nconst DialogForm = (props) => {\r\n    const initialValues = {\r\n        messageText: ''\r\n    }\r\n    let onSubmit =  (values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n            console.log(values.messageText)\r\n            props.SendMessageActionCreater(values.messageText)\r\n            setSubmitting(false);\r\n        }, 400);\r\n    }\r\n    let SignupSchema = Yup.object().shape({\r\n        messageText: Yup.string()\r\n            .min(1, 'Too Short!')\r\n            .max(105, 'Too Long!')\r\n    });\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n            validationSchema = {SignupSchema}>\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <Field type=\"text\" name={'messageText'} placeholder={'type your message'}  onChange={handleChange} onBlur={handleBlur} value={values.messageText}/>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\" disabled={isSubmitting} className={message.mybutton} >Send Message</button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default DialogForm;","import message from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogsItem';\r\nimport Message from \"./MessagesItem/Message\";\r\nimport {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsAuth, getMessage} from \"../../redux/selectors/dialogSelectors\";\r\nimport DialogsForm from \"./DialogsForm\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nfunction Dialogs(props) {\r\n\r\n\r\n    const isAuth = useSelector( state => getIsAuth(state))\r\n    let navigator = useNavigate()\r\n    useEffect(() => {\r\n        if (isAuth === false) {\r\n            return navigator('/login')\r\n        }\r\n    }, [isAuth, navigator]);\r\n\r\n\r\n\r\n    const dialogsPage = useSelector( state => getMessage(state))\r\n    let dialogsElements = dialogsPage.dialogsData.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n    let messagesElements = dialogsPage.messagesData.map(m => <Message ava={m.ava} key={m.id} id={m.id} content={m.message}/>)\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    // const sendMsgAC = (newMessageText) => dispatch(SendMessageActionCreator());\r\n    const sendMsgAC = (newMessageText) => dispatch({type:'SEND_MESSAGE', newMessageText})\r\n\r\n\r\n    return (\r\n        <div className={message.dialogs}>\r\n            <div className={message.notify}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={message.paper_dial}>\r\n                {messagesElements}\r\n            </div>\r\n            <DialogsForm SendMessageActionCreater={sendMsgAC}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs","export const getMessage = (state) => {\r\n    return state.dialogsPage\r\n}\r\n\r\nexport const getIsAuth = (state) => {\r\n    return state.auth.isAuth\r\n}"],"names":["props","path","id","className","d","to","name","message","content","SignupSchema","Yup","shape","messageText","min","max","initialValues","onSubmit","values","setSubmitting","setTimeout","console","log","SendMessageActionCreater","validationSchema","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","type","placeholder","onChange","onBlur","value","disabled","isAuth","useSelector","state","auth","getIsAuth","navigator","useNavigate","useEffect","dialogsPage","getMessage","dialogsElements","dialogsData","map","messagesElements","messagesData","m","ava","dispatch","useDispatch","DialogsForm","newMessageText"],"sourceRoot":""}